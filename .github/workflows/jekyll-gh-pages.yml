# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
  
  build-firmware:
    name: Build firmware
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3.3.0
      - name: Cache Gradle packages
        uses: actions/cache@v3
        id: cache-esphome
        with:
          path: ~/.esphome
          key: ${{ runner.os }}-esphome
          
      - name: Build firmware
        uses: esphome/build-action@v1.8.0
        id: esphome-build
        with:
          yaml_file: humitemp.yaml
          version: latest
      - name: Copy firmware and manifest
        run: |
          mkdir output
          mv ${{ steps.esphome-build.outputs.name }} output/
          jq -s '{"name": "esphome-humitemp v2", "new_install_improv_wait_time": 15, "new_install_prompt_erase": true, "version": "${{ steps.esphome-build.outputs.esphome-version }}", "home_assistant_domain": "esphome", "new_install_skip_erase": false, "builds":.}' output/${{ steps.esphome-build.outputs.name }}/manifest.json > output/manifest.json
          ls -l
          find

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: manifest.json
          path: output

  consolidate:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    name: Consolidate firmwares
    runs-on: ubuntu-latest
    needs: build-firmware
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Download built firmwares
        uses: actions/download-artifact@v3
        with:
          path: firmwares
      - name: Copy files
        run: |-
          mkdir output
          cp -R static/* output/
          cp -R firmwares/*/* output/
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: output

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build-docs, consolidate]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
